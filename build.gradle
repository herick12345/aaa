plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.3'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'ads'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// Spring Boot Starters
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	
	// MySQL Driver
	implementation 'mysql:mysql-connector-java:8.0.33'
	
	// Jackson para JSON (já incluído no spring-boot-starter-web, mas explícito para clareza)
	implementation 'com.fasterxml.jackson.core:jackson-databind'
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
	
	// Ferramentas de desenvolvimento
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	
	// Dependências de teste
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:mysql'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	
	// Documentação da API (opcional, mas útil)
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
	
	// Utilitários
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
}

tasks.named('test') {
	useJUnitPlatform()
}

bootRun {
	environment 'spring.output.ansi.console-available', true
	// Configurações para desenvolvimento
	jvmArgs = [
		'-Dspring.profiles.active=dev',
		'-Dspring.devtools.restart.enabled=true',
		'-Dspring.devtools.livereload.enabled=true'
	]
}

// Configuração para empacotamento
jar {
	enabled = false
	archiveClassifier = ''
}

// Configuração para build de produção
bootJar {
	archiveFileName = "${project.name}-${project.version}.jar"
	launchScript()
}

// Task personalizada para limpar dados de desenvolvimento
task cleanDevData {
	description = 'Remove dados de desenvolvimento do banco'
	group = 'development'
	doLast {
		println 'Para limpar dados de desenvolvimento, execute: docker-compose down -v'
	}
}

// Task para verificar se o Docker está rodando
task checkDocker {
	description = 'Verifica se o Docker está rodando'
	group = 'verification'
	doLast {
		try {
			def process = 'docker --version'.execute()
			process.waitFor()
			if (process.exitValue() == 0) {
				println 'Docker está disponível'
			} else {
				throw new GradleException('Docker não está disponível')
			}
		} catch (Exception e) {
			throw new GradleException('Docker não está instalado ou não está rodando')
		}
	}
}

// Task para iniciar o ambiente de desenvolvimento
task startDev {
	description = 'Inicia o ambiente de desenvolvimento completo'
	group = 'development'
	dependsOn checkDocker
	doLast {
		println 'Iniciando banco de dados MySQL...'
		def process = 'docker-compose up -d'.execute()
		process.waitFor()
		if (process.exitValue() == 0) {
			println 'Banco de dados iniciado com sucesso!'
			println 'Aguarde alguns segundos para o banco estar pronto...'
			Thread.sleep(10000) // Aguarda 10 segundos
			println 'Execute: ./gradlew bootRun para iniciar a aplicação'
		} else {
			throw new GradleException('Erro ao iniciar o banco de dados')
		}
	}
}

// Task para parar o ambiente de desenvolvimento
task stopDev {
	description = 'Para o ambiente de desenvolvimento'
	group = 'development'
	doLast {
		println 'Parando ambiente de desenvolvimento...'
		def process = 'docker-compose down'.execute()
		process.waitFor()
		if (process.exitValue() == 0) {
			println 'Ambiente parado com sucesso!'
		}
	}
}

// Configurações de compilação
compileJava {
	options.encoding = 'UTF-8'
	options.compilerArgs += ['-parameters']
}

compileTestJava {
	options.encoding = 'UTF-8'
}

// Configuração para recursos
processResources {
	filesMatching('application*.properties') {
		expand(project.properties)
	}
}

// Configuração para testes
test {
	useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
		exceptionFormat "full"
	}
	// Configurações para testes com Testcontainers
	systemProperty 'spring.profiles.active', 'test'
}

// Wrapper do Gradle
wrapper {
	gradleVersion = '8.14.2'
	distributionType = Wrapper.DistributionType.BIN
}